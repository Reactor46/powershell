<#
.SYNOPSIS

Displays a date/time in the format of, for example,
2013-07-14_23-06-35.

.DESCRIPTION

The date/time shown is in the format of:

  yyyy-mm-dd_hh-mi-ss.

This string can be used to form part of a filename when uploading
files to SharePoint. Some files created don't really have unique
filenames, so in order to make them unique, and upload them to
SharePoint for example, the string generated by this program can
be used.

No parameters are required or used.

.EXAMPLE

./SharePointString.ps1

.INPUTS

None. No .NET Framework types of objects are used as input.

.OUTPUTS

Sample output

Suggested string to use as a filename could be, 2013-07-14_23-06-35

.NOTES

Additional information about the function or script.
Additional Notes, eg:

File Name    : SharePointString.ps1
Author       : Ian Molloy
Last updated : 2013-07-14

For information regarding this subject (comment-based help),
execute the command:
PS> Get-Help about_comment_based_help

.LINK

about_Comment_Based_Help
http://technet.microsoft.com/en-us/library/dd819489.aspx

WTFM: Writing the Fabulous Manual
http://technet.microsoft.com/en-us/magazine/ff458353.aspx

about_Functions_Advanced_Parameters
http://technet.microsoft.com/en-us/library/hh847743.aspx

Cmdlet Parameter Sets
http://msdn.microsoft.com/en-us/library/windows/desktop/dd878348(v=vs.85).aspx
#>

[cmdletbinding()]
Param () #end param

#region ********** function Get-Script-Info **********
##=============================================
## Function: Get-Script-Info
## Created: 2013-05-25
## Author: Ian Molloy
## Arguments: none
##=============================================
## Purpose: displays the script name and folder from
## where the script is running from.
##
## Returns: N/A
##=============================================
function Get-Script-Info()
{
   if ($MyInvocation.ScriptName) {
       $p1 = Split-Path -Leaf $MyInvocation.ScriptName;
       $p2 = Split-Path -Parent $MyInvocation.ScriptName;
       Write-Host "`nExecuting script ""$p1"" in folder ""$p2""";
   } else {
      $MyInvocation.MyCommand.Definition;
   }

}
#endregion ********** end of function Get-Script-Info **********

#region ********** function Get-DateString **********
##=============================================
## Function: Get-DateString
## Created: 2013-07-14
## Author: Ian Molloy
## Arguments: none
##=============================================
## Purpose: displays the current date/time in the format of,
##          for example, yyyy-mm-dd_hh-mi-ss. This can be
##          used if I want to generate a string with which to
##          use with a file when uploading to SharePoint.
##
##          This way, I can have unique filenames to use with,
##          for example, Oracle AWR and ADDM reports so as to
##          make them unique.
##
## Returns: a date/time in the format of, for example,
##          2013-07-14_22-27-44
##=============================================
## See also: DateTime Structure
## http://msdn.microsoft.com/en-us/library/system.datetime.aspx
##=============================================
function Get-DateString() {
  Write-Verbose -Message "This is function Get-DateString";

  # Obtains the date/time in the format of yyyy-mm-ddThh:mi:ss.
  $mydate = Get-Date -Format s;
  Write-Host "`nThe current date/time is $(Get-Date -Format r)";

  $mydate = $mydate -replace 'T','_';
  $mydate = $mydate -replace ':','-';

  return $mydate;
}
#endregion ********** end of function Get-DateString **********

##=============================================
## SCRIPT BODY
## MAIN ROUTINE STARTS HERE
##=============================================


Get-Script-Info;

Write-Verbose -Message "Calling function Get-DateString";
$str = Get-DateString;
Write-Host "`nSuggested string to use as a filename could be, $str`n";

Write-Verbose -Message "All done now!";
##=============================================
## END OF SCRIPT: SharePointString.ps1
##=============================================

